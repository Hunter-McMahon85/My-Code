# Execution begins at address 0
.pos 0
irmovq stack, %rsp      # Set up stack pointer
call main               # Execute main program
halt                    # Terminate program
# Array of 10 elements
.align 8
array:  
    .quad 0x000000000001
    .quad 0x000000000009
    .quad 0x000000000008
    .quad 0x000000000004
    .quad 0x000000000006
    .quad 0x000000000005
    .quad 0x000000000007
    .quad 0x000000000003
    .quad 0x000000000002
    .quad 0x000000000010
    
main:
    irmovq array, %rdi
    irmovq $10, %rsi
    call SORT 
    ret

#void sort(long *arr, long length) {
#	long sorted = 0;
#	while (!sorted) {
# 		sorted = 1;
# 		for (long i = 0; i < length - 1; ++i) {
# 		if (arr[i] > arr[i + 1]) {
# 			swap(&arr[i], &arr[i + 1]);
# 			sorted = 0;
# 		}
# 	}
# }
#}
# goto version
#void 
#sort(long *arr, long length) 
#{
#   long sorted = 0
#   LOOP:
#       {
#       sorted = 1;
#       long i = 0;
#       L2:
#           {
#           if (arr[i] > arr[i + 1]) 
#               {
#               swap(&arr[i], &arr[i + 1]);
#               sorted = 0;
#               }
#               i++
#           } if (i < length - 1) goto L2;
#       } if (!sorted) goto LOOP;
#)

# %r8 sorted 
# %r9 alias n
# %r11 alias array ptr
# %rbx is i
# %rax to alias %r9 for compare
# %r12 alias %rdi for compare
# %r13 alias %rsi for compare
# %rax alias for i compare 
SORT:               
    irmovq $0, %r8     
    rrmovq %rsi, %r9
    rrmovq %rdi, %r11
    LOOP:
        irmovq $1, %r8    #sorted = 1;
        irmovq $0, %rbx   #long i = 0;
        rrmovq %r11, %rdi
        jmp L2COND
        SWAPIF:
            call    swap         # swap(&arr[i], &arr[i + 1]);
            irmovq  $0, %r8      # sorted = 0;
        L2COND: # if (i < length - 1) goto L2;
            iaddq  $1, %rbx # i++
            rrmovq %r9, %rax 
            subq   %rbx, %rax
            jle   WLOOP
        L2: # if (arr[i] > arr[i + 1]) 
            rrmovq %rdi, %rsi     # a[i]
            iaddq  $8, %rdi       # a[i+1]
            
            mrmovq (%rdi), %r12
            mrmovq (%rsi), %r13
            
            subq   %r13, %r12     # a[i+1] - a[i]
            jle    L2COND         # a[i] <= a[i+1]
            jmp    SWAPIF 	# a[i] > a[i+1]
        WLOOP:# if (!sorted) goto LOOP;
            isubq $1, %r8
            jl LOOP
        END:
            ret

swap:
    mrmovq (%rdi), %rcx #long x = *xp;
    mrmovq (%rsi), %rdx #long y = *yp;
    rmmovq %rcx, (%rsi) #*xp = y;
    rmmovq %rdx, (%rdi) #*yp = x;
    ret

# Stack starts here and grows to lower addresses
.pos 0x200
stack: