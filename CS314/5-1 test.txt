# Execution begins at address 0
.pos 0
irmovq stack, %rsp      # Set up stack pointer
call main               # Execute main program
halt                    # Terminate program
# Array of 10 elements
.align 8
array:  
    .quad 0x000000000001
    .quad 0x000000000009
    .quad 0x000000000008
    .quad 0x000000000004
    .quad 0x000000000006
    .quad 0x000000000005
    .quad 0x000000000007
    .quad 0x000000000003
    .quad 0x000000000002
    .quad 0x000000000010
    
main:
    irmovq array, %rdi
    irmovq $10, %rsi
    call SORT 
    ret

# goto version
#void 
#sort(long *arr, long length) 
#{
#   long sorted = 0
#   LOOP:
#       {
#       sorted = 1;
#       long i = 0;
#       L2:
#           {
#           if (arr[i] > arr[i + 1]) 
#               {
#               swap(&arr[i], &arr[i + 1]);
#               sorted = 0;
#               }
#               i++
#           } if (i < length - 1) goto L2;
#       } if (!sorted) goto LOOP;
#)

# %r8 sorted 
# %r9 alias n
# %r12 alias array ptr
# %rbx is i
# %rax to alias %r9 cor compare
# %r11 alias %rsi for compare
SORT:
    pushq   %rsi
    pushq   %rdi
    irmovq $0, %r8
    rrmovq %rsi, %r9
    rrmovq %rdi, %r12
    LOOP:
        irmovq $1, %r8
        irmovq $0, %rbx
        rrmovq %r12, %rdi
        jmp L2
        SWAPIF:
            call    swap     # swap(&arr[i], &arr[i + 1]);
            irmovq  $0, %r8  # sorted = 0;
        L2COND:
            iaddq  $1, %rbx
            rrmovq %r9, %rax
            subq %rbx, %rax
            jle WLOOP
        L2: 
            rrmovq %rdi, %rsi # a[i]
            iaddq $8, %rdi    # a[i+1]
            
            mrmovq (%rsi), %r11
            subq %rdi, %r11     # a[i]-a[i+1]
            jl  SWAPIF          # a[i]>a[i+1]
            jmp L2COND
        WLOOP:
            isubq $1, %r8
            jle LOOP
        
        END:
            popq   %rsi
            popq   %rdi
            ret

swap:
    mrmovq (%rdi), %rcx #long x = *xp;
    mrmovq (%rsi), %rdx #long y = *yp;
    rmmovq %rcx, (%rsi) #*xp = y;
    rmmovq %rdx, (%rdi) #*yp = x;
    ret

# Stack starts here and grows to lower addresses
.pos 0x200
stack:  